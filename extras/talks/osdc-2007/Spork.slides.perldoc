----
presentation_topic: Perldoc
presentation_title: Perldoc - A New Documentation System for Perl
presentation_place: YAPC - Toronto
presentation_date: June 29th, 2007
show_controls: 0
----
== From whence
.image:6304203985.01.LZZZZZZZ.jpg

* Hail to the Pod!!
** Perl has a documentation *standard* for over 10 years
** Easy to learn
** Useful inside and outside programs
** Purposefully simplistic, yet extensible

----
== to whither...
.image:poster.gif 250

* Death to the Pod!!
** Doesn't play nicely with programs
** Requires you to to repeat yourself
** Syntax is clumsy
** Various incompatible implementations

----
== Introducing Perldoc
.image:Podpeople.jpg
* A New Documentation System for Perl
* 100% Backwards compatible with Pod
* Available as Perldoc.pm

----
== Perldoc Goals
.image:display-02.jpg 300

* More, Better Documentation in Perl programs
* Multiple documentation markups
** Kwid
* Define a common extensible information model (based on Pod)
* Round-trip losslessly between markups
* Allow documentation to be drawn from program and comments

----
no_translate: 1
----
== Math::Barbie
.image:first-ice-barbie005.jpg 550

----
== A Sample Module - Mixed Code and Pod

.hilite
=head1 NAME

Math::Barbie - Math is B<Hard>

=head1 SYNOPSIS

    use Math::Barbie;

    print "2 + 4 = ", add(2, 4);
    print "2 / 4 = ", divide(2, 4);

=head1 DESCRIPTION

As B<Arithmetic Barbie> has taught us: "I<Math is Hard!>".
C<Math::Barbie> changes all that. It makes doing math as easy as
pulling a string.

=head1 FUNCTIONS

The following functions are exported by C<Math::Barbie>:

=over

=cut

package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

=item add()

Add two arguments and return the result.

Arguments:

  $x - First number
  $y - Second number

=cut

sub add {
    my $x = shift;
    my $y = shift;
    return $x + $y;
}

=item divide()

Divide the first number by the second number and return the result.

Arguments:

  $x - Numerator
  $y - Divisor

=cut

sub divide {
    my $x = shift;
    my $y = shift
      or die "Can't divide by zero";
    return $x / $y;
}

1;

=back

=head1 BUGS

Math::Barbie currently only supports half of the mathematical functions.
C<subtract> and C<multiply> are I<coming real soon now>.

=head1 SEE ALSO

L<Math::Ken>

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2007. Ingy döt Net. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut

r+   1-24
b+   26-28
r+   30-39
b+   41-45
r+   47-56
b+   58-65
r+   67-100
----
== A Sample Module - Separated Code and Pod

.hilite
package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

sub add {
    my $x = shift;
    my $y = shift;
    return $x + $y;
}

sub divide {
    my $x = shift;
    my $y = shift
      or die "Can't divide by zero";
    return $x / $y;
}

1;

=head1 NAME

Math::Barbie - Math is B<Hard>

=head1 SYNOPSIS

    use Math::Barbie;

    print "2 + 4 = ", add(2, 4);
    print "2 / 4 = ", divide(2, 4);

=head1 DESCRIPTION

As B<Arithmetic Barbie> has taught us: "I<Math is Hard!>".
C<Math::Barbie> changes all that. It makes doing math as easy as
pulling a string.

=head1 FUNCTIONS

The following functions are exported by C<Math::Barbie>:

=over

=item add()

Add two arguments and return the result.

Arguments:

  $x - First number
  $y - Second number

=item divide()

Divide the first number by the second number and return the result.

Arguments:

  $x - Numerator
  $y - Divisor

=back

=head1 BUGS

Math::Barbie currently only supports half of the mathematical functions.
C<subtract> and C<multiply> are I<coming real soon now>.

=head1 SEE ALSO

L<Math::Ken>

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2007. Ingy döt Net. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut

b+   1-18
r+   20-100
+
rrrrrr 20
                       rrrrrrr 22
rrrrrr 24
rrrrrr 31
   rrrrrrrrrrrrrrrrrrrr                 rrrrrrrrrrrrrrrr 33
rrrrrrrrrrrrrrr 34
rrrrrr 37
                                        rrrrrrrrrrrrrrr  39
rrrrr  41
rrrrr 43
rrrrr 52
rrrrr 61
rrrrrr 63
rrrrrrrrrrr     rrrrrrrrrrr     rrrrrrrrrrrrrrrrrrrrrrr 66
rrrrrr 68
rrrrrrrrrrrr 70
rrrrrr 72
rrrrrr 76
    rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr  83
rrrr 85
----
== A Sample Module - Convert to Kwid

.hilite
package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

sub add {
    my $x = shift;
    my $y = shift;
    return $x + $y;
}

sub divide {
    my $x = shift;
    my $y = shift
      or die "Can't divide by zero";
    return $x / $y;
}

1;

__END__

= NAME

Math::Barbie - Math is *Hard*

= SYNOPSIS

    use Math::Barbie;

    print "2 + 4 = ", add(2, 4);
    print "2 / 4 = ", divide(2, 4);

= DESCRIPTION

As *Arithmetic Barbie* has taught us: "{/Math is Hard/}".
`Math::Barbie` changes all that. It makes doing math as easy as
pulling a string.

= FUNCTIONS

The following functions are exported by `Math::Barbie`:

.list

- add()

Add two arguments and return the result.

Arguments:

  $x - First number
  $y - Second number

- divide()

Divide the first number by the second number and return the result.

Arguments:

  $x - Numerator
  $y - Divisor

!list

= BUGS

Math::Barbie currently only supports half of the mathematical functions.
`subtract` and `multiply` are /coming real soon now/.

= SEE ALSO

[Math::Ken]

= AUTHOR

Ingy döt Net <ingy@cpan.org>

= COPYRIGHT

Copyright (c) 2007. Ingy döt Net. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See [http://www.perl.com/perl/misc/Artistic.html]

r 22
                       rrrrrr 24
r 26
r 33
   rrrrrrrrrrrrrrrrrrr                 rrrrrrrrrrrrrrrr 35
rrrrrrrrrrrrrr 36
r 39
                                        rrrrrrrrrrrrrr 41
r+ 43
r 45
r 54
r+ 63
r 65
rrrrrrrrrr     rrrrrrrrrr     rrrrrrrrrrrrrrrrrrrrrr 68
r 70
r+ 72
r 74
r 78
    r+ 85
----
== A Sample Module - Perldoc

.hilite
## Math is *Hard*
#
# As *Arithmetic Barbie* has taught us: "{/Math is Hard/}".
# `Math::Barbie` changes all that. It makes doing math as easy as
# pulling a string.
#
# Copyright (c) 2007.
# Ingy döt Net <ingy@cpan.org>.
# All rights reserved.
# 
package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

## SYNOPSIS:
# 
#     use Math::Barbie;
# 
#     print "2 + 4 = ", add(2, 4);
#     print "2 / 4 = ", divide(2, 4);

## Add two arguments and return the result.
sub add {
    my $x = shift;   ## First number
    my $y = shift;   ## Second number
    return $x + $y;
}

## Divide the first number by the second number and return the result.
sub divide {
    my $x = shift;   ## Numerator
    my $y = shift    ## Divisor
      or die "Can't divide by zero";
    return $x / $y;
}

## BUGS:
# Math::Barbie currently only supports half of the mathematical functions.
# `subtract` and `multiply` are /coming real soon now/.

## See Also: [Math::Ken]

1;

ggb+ 1-10
        rrrrrrrrrrrr 11
                 rrr rrrrrr 13
ggb+ 15-20
ggb+ 22
    rrr 23
       rr            ggb+ 24-25
ggb+ 29
    rrrrrr 30
       rr            ggb+ 31-32
ggb+ 37-41
----
== Kwid for Plain Old Dummies
.image:dumdum1953.jpg

Pod:

    =head2 Cool Stuff
    
    B<This> piece of code for C<Foo::Bar> is I<way cool>.
    
        sub way_cool {
            ...
        }
    
    It is everything you need:
    
    =over
    
    =item *
    
    Fast
    
    =item *
    
    Quick
    
    =item *
    
    Speedy
    
    =back

----
== Kwid for Plain Old Dummies
.image:foo_large.gif

Kwid:

    == Cool Stuff
    
    *This* piece of code for `Foo::Bar` is /way cool/.
    
        sub way_cool {
            ...
        }
    
    It is everything you need:
    
    * Fast
    * Quick
    * Speedy

----
== Perldoc In Action

* Module Install Does It All
* Perldoc Live Demo

