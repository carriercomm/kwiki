----
presentation_topic: 再 2.0
presentation_title: 再 2.0 - New Things in World::Ingy
presentation_place: Taipei
presentation_date: April 15th, 2007
----
Ingy 2.0
# 哈哈哈哈哈
Yet Another 2.0
# 哇哈哈哇哈哈哇
Haiku 2.0
# 哇哇哇哇哇
----
Kwiki to |Taipei|
Ingy Shows |2.0| Stuff
A Topic for |Spring|
----
|Haiku| is OK
But Ingy Likes |Limericks|
Please Let Me Explain
----
The Poetry Known as Haiku
Leaves a hacker with too much to do.
> The minding of syllables...
> I'd rather watch kill-a-bills.
Kill Bill has far better Kung Fu.
----
Ingy dot Net was a man,
Who hacked on weird plan after plan.
> As hard as he tried,
> His ideas always died.
But at least he is big in Japan.
----
There once was a hacker named Ingy
2.0 was his thingy.
> He went to Taipei,
> But to his dismay,
They sent him back home in a dingy.
----
This Ingy it often was said,
Would hack all day in his bed.
> But the harder he hacked,
> The weirder and whacked
Were his h@><. zomg orz.
----
* Sometimes old stuff is the |best stuff|
+* Maybe it's not |shiny| anymore
+* But a little |polishing| goes a long way
+* And then you just call it |2.0|!
+
Last Year I Made |Two Big Upgrades|...
----
== Ingy 2.0
.image:ingy.jpg 250
----
== Ingy 2.0
Brian Ingerson
Legally |Ingy dot Net|
Old is New Again
----
* In September I changed my name legally to |Ingy dot Net|
+* |Ingy| is my first name
+* |dot Net| is my last name
+* |dot| is *not* my middle name
----
.image:legal.jpg 500
----
* But |Ingy dot Net| is not my |real| name
+* My real name is *Ingy d{|ö|}t Net*
+* But the US Government is |ASCII| only
+* Well more like |EBCDIC| only
----
== Degrade Gracefully
* Ingy 2.0 |degrades gracefully|
+* In a fully compliant environment it is |Ingy döt Net|
+* In |reality| it takes many forms
----
== INGY DOT NET
.image:passport.jpg 450
----
== DOTNET, INGY
.image:eva.jpg 450
----
== IngyDotNet
.image:wiki.png 300
----
== Non Graceful Degradation
Sometimes things just go wrong
----
== Ingy d?t Net
.image:amazon.gif 300 
----
== Ingy dt Net
.image:ups.jpg 300
----
== Ingy D Net
.image:bank.jpg 400
----
== Ingy.Net
.image:mom.gif 400
----
== Ingy Net
.image:orz.jpg 500
+== orz
----
== `....@_@....>_<....orz....o_0....X_X....`
----
Thank you Mr. Net
.image:safeway.jpg
----
== Kwiki 2.0

There once was a project called Kwiki,
Whose maintenance proved to be tricky.
> To make the thing go,
> They tacked on |2.0|.
And now it's one heck of a wiki.
----
== Kwiki 1.0

|Kwiki| is to Wiki
as |Perl| is to Programming

* /Kwiki is not so much about being a wiki/
* Kwiki is all about being a |Lego Set|
* Kwiki is about being |easy and fun| to play with
+* Kwiki is about a |Community|
----
== Kwiki 1.0
.image:palm90.png 300
----
== Kwiki 1.0

* Kwiki was a |successful| CPAN Project
* |150| CPAN Dists - `Kwiki-*`

----
== Kwiki 1.0

* Kwiki-0.38 was released |April 2005|
+* Kwiki was |too| stable
+* Stable == |Dead|

----
== Kwiki 1.0

* But being dead is not so bad
+* Because you can then be |reborn|
+* Enter |Kwiki 2.0|

----
== K2

.image:k2.jpg
----
== Kwiki 2.0

* In December 2006 I decided to make Kwiki come back to life
+* I started a new brand new |www.kwiki.org| wiki
+* I set up a |Trac| for project planning
+* I started a new |svn repo|
+* I gave all the |#kwiki| people commit bits
----
== No CPAN
* I decided to move /away/ from CPAN for a while
+* The Kwiki on CPAN is at a stable state
* Why muck with it?
+* Hacking on |SVN is agile|
----
== Kwiki Problems
* |Too Many Modules| to Install
* Kwiki is |Slowie|
* No Documentation

----
== Kwiki 2.0 Focus
* Too Many Modules to Install
** Make Kwiki |Easy To Install|
+* Kwiki is Slowie
** Make Kwiki |Faster|
+* No Documentation
** |Document Kwiki|

----
== Kwiki Installation
* |Kwiki 2.0| currently comes with over |500| perl modules.
+* It takes {*< 1 minute*} to install!

----
== Kwiki Software Installation Instructions

    > svn checkout http://svn.kwiki.org/kwiki/trunk ~/src/kwiki
    > export PATH=~/src/kwiki/bin:$PATH

+* That's it.
+* You get *Spork* for free!
----
== Kwiki Wiki Creation Instructions

    > kwiki -new my-wiki

    > vim plugins
    > kwiki -update

    > kwiki -start

----
== Kwiki Software Upgrade Instructions
    > svn up
+== Yay!
----
== The Great Kwiki Source Code Reorg

* I gathered all the Kwiki source code:
** All Old SVN Kwiki modules - in |separate author directories|
** All CPAN Kwiki modules
** Some Kwiki hacks lying around on various machines
* I grabbed all the CPAN modules that Kwiki uses
* I stole some modules from |Socialtext|
----
== Enter the Symlink

* All 500 modules are |preinstalled|.
+* I made a `lib` tree with symlinks to all the modules in place
+* Kwiki knows where to find this |huge module tree|
+* Installing Kwiki has |zero dependencies|
+* Installing Kwiki has |zero impact| on your system
+* It is pretty much |guaranteed| to work

----
== Win32 and Perl

* But symlinks don't work on MSWin32 (Windows)
+* |Neither does Kwiki!|
* Kwiki is a server app
* |Unix is for servers|
* Also Kwiki requires |Perl 5.8.3|

* Why make life |so hard|?
* Kwiki is all about Fun
* No CPAN, No old Perl, No Windows == |EASY|!

----
== Kwiki is Kwiker

* Ingy wrote Kwiki::Cache::Formatter
* |Miyagawa| wrote Kwiki::FastCGI
----
== Kwiki::FastCGI

* FastCGI Rocks!

----
|index.cgi|

    use Kwiki::Boot;
    Kwiki::Boot->boot->kwiki->process;

+|index.fcgi|

    use Kwiki::Boot;
    use CGI::Fast;
    while ( my $cgi = CGI::Fast->new ) {
        Kwiki::Boot->boot->kwiki->process;
    }

----
== Kwiki Documentation - Doolittle

* Introducing |Doolittle|
* Let the Community Write the Doc
* So Ingy can |do little| work
----
== Kwiki Documentation - Doolittle

* http://doolittle.kwiki.org
* Kwiki::Doolittle::Formatter
** Kwiki::Formatter::Pod
* |Pull all POD| out of each module
* Symlink into a big Kwiki |database of documentation|

----
== Kwiki Documentation - Doolittle

* This idea could work for Perl doc itself
+* Or even Plagger

----
== Future Kwiki Plans

* Implement |MediaWiki| with Kwiki
+* Completely |Customizable Formatter|
** Make |your own| markup
+* Get everything |back to CPAN|
----
== Spork 2.0

* This is my 4th year to Taiwan
* Every year I write a new slideshow tool
* This year I returned to Spork
* But with a new Formatter

----
== Spork 2.0

* These slides were done using |Spork|
+* Spork is now |moved| into K2
+* So if you install Kwiki 2.0, then:

    cd kwiki/trunk/extras/talks/osdc-2007
    spork -make
    spork -start

----
== Spork::Formatter2

.hilite
package Spork::Formatter2;
use Spoon::Base -Base;
use Spork::Parser;
use Spork::Emitter::HTML;

sub text_to_html {
    my $text = shift;
    my $ast = Spork::Parser->new->parse($text);
    return Spork::Emitter::HTML->new->emit($ast);
}

        bbbbbbbbbbbbbbbbb 1
r+ 3-4
                                  ggggg 8
                                      gggg 9
+
r+ 6-10
+
g+ 6-10
+
b+ 6-10
.hilite

----
* 一
+* 二
+* 茶
----
== Perldoc 2.0
.image:perldoc2_logo.gif 400
Hickory Rickory Rock
The Mouse Began Reading The Doc
> He said OMG!
> There's just too much POD
I'd like to give Larry a sock!

----
== From whence
.image:6304203985.01.LZZZZZZZ.jpg

* Hail to the Pod!!
** Perl has a documentation *standard* for over 10 years
** Easy to learn
** Useful inside and outside programs
** Purposefully simplistic, yet extensible

----
== to whither...
.image:poster.gif 250

* Death to the Pod!!
** Doesn't play nicely with programs
** Requires you to to repeat yourself
** Syntax is clumsy
** Various incompatible implementations

----
== Introducing Perldoc
.image:Podpeople.jpg
* A New Documentation System for Perl
* 100% Backwards compatible with Pod
* Available as Perldoc.pm

----
== Perldoc Goals
.image:display-02.jpg 300

* More, Better Documentation in Perl programs
* Multiple documentation markups
** Kwid
* Define a common extensible information model (based on Pod)
* Round-trip losslessly between markups
* Allow documentation to be drawn from program and comments

----
no_translate: 1
----
== Math::Barbie
.image:first-ice-barbie005.jpg 550

----
== A Sample Module - Mixed Code and Pod

.hilite
=head1 NAME

Math::Barbie - Math is B<Hard>

=head1 SYNOPSIS

    use Math::Barbie;

    print "2 + 4 = ", add(2, 4);
    print "2 / 4 = ", divide(2, 4);

=head1 DESCRIPTION

As B<Arithmetic Barbie> has taught us: "I<Math is Hard!>".
C<Math::Barbie> changes all that. It makes doing math as easy as
pulling a string.

=head1 FUNCTIONS

The following functions are exported by C<Math::Barbie>:

=over

=cut

package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

=item add()

Add two arguments and return the result.

Arguments:

  $x - First number
  $y - Second number

=cut

sub add {
    my $x = shift;
    my $y = shift;
    return $x + $y;
}

=item divide()

Divide the first number by the second number and return the result.

Arguments:

  $x - Numerator
  $y - Divisor

=cut

sub divide {
    my $x = shift;
    my $y = shift
      or die "Can't divide by zero";
    return $x / $y;
}

1;

=back

=head1 BUGS

Math::Barbie currently only supports half of the mathematical functions.
C<subtract> and C<multiply> are I<coming real soon now>.

=head1 SEE ALSO

L<Math::Ken>

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2007. Ingy döt Net. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut

r+   1-24
b+   26-28
r+   30-39
b+   41-45
r+   47-56
b+   58-65
r+   67-100
----
== A Sample Module - Separated Code and Pod

.hilite
package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

sub add {
    my $x = shift;
    my $y = shift;
    return $x + $y;
}

sub divide {
    my $x = shift;
    my $y = shift
      or die "Can't divide by zero";
    return $x / $y;
}

1;

=head1 NAME

Math::Barbie - Math is B<Hard>

=head1 SYNOPSIS

    use Math::Barbie;

    print "2 + 4 = ", add(2, 4);
    print "2 / 4 = ", divide(2, 4);

=head1 DESCRIPTION

As B<Arithmetic Barbie> has taught us: "I<Math is Hard!>".
C<Math::Barbie> changes all that. It makes doing math as easy as
pulling a string.

=head1 FUNCTIONS

The following functions are exported by C<Math::Barbie>:

=over

=item add()

Add two arguments and return the result.

Arguments:

  $x - First number
  $y - Second number

=item divide()

Divide the first number by the second number and return the result.

Arguments:

  $x - Numerator
  $y - Divisor

=back

=head1 BUGS

Math::Barbie currently only supports half of the mathematical functions.
C<subtract> and C<multiply> are I<coming real soon now>.

=head1 SEE ALSO

L<Math::Ken>

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2007. Ingy döt Net. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut

b+   1-18
r+   20-100
+
rrrrrr 20
                       rrrrrrr 22
rrrrrr 24
rrrrrr 31
   rrrrrrrrrrrrrrrrrrrr                 rrrrrrrrrrrrrrrr 33
rrrrrrrrrrrrrrr 34
rrrrrr 37
                                        rrrrrrrrrrrrrrr  39
rrrrr  41
rrrrr 43
rrrrr 52
rrrrr 61
rrrrrr 63
rrrrrrrrrrr     rrrrrrrrrrr     rrrrrrrrrrrrrrrrrrrrrrr 66
rrrrrr 68
rrrrrrrrrrrr 70
rrrrrr 72
rrrrrr 76
    rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr  83
rrrr 85
----
== A Sample Module - Convert to Kwid

.hilite
package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

sub add {
    my $x = shift;
    my $y = shift;
    return $x + $y;
}

sub divide {
    my $x = shift;
    my $y = shift
      or die "Can't divide by zero";
    return $x / $y;
}

1;

__END__

= NAME

Math::Barbie - Math is *Hard*

= SYNOPSIS

    use Math::Barbie;

    print "2 + 4 = ", add(2, 4);
    print "2 / 4 = ", divide(2, 4);

= DESCRIPTION

As *Arithmetic Barbie* has taught us: "{/Math is Hard/}".
`Math::Barbie` changes all that. It makes doing math as easy as
pulling a string.

= FUNCTIONS

The following functions are exported by `Math::Barbie`:

.list

- add()

Add two arguments and return the result.

Arguments:

  $x - First number
  $y - Second number

- divide()

Divide the first number by the second number and return the result.

Arguments:

  $x - Numerator
  $y - Divisor

!list

= BUGS

Math::Barbie currently only supports half of the mathematical functions.
`subtract` and `multiply` are /coming real soon now/.

= SEE ALSO

[Math::Ken]

= AUTHOR

Ingy döt Net <ingy@cpan.org>

= COPYRIGHT

Copyright (c) 2007. Ingy döt Net. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See [http://www.perl.com/perl/misc/Artistic.html]

r 22
                       rrrrrr 24
r 26
r 33
   rrrrrrrrrrrrrrrrrrr                 rrrrrrrrrrrrrrrr 35
rrrrrrrrrrrrrr 36
r 39
                                        rrrrrrrrrrrrrr 41
r+ 43
r 45
r 54
r+ 63
r 65
rrrrrrrrrr     rrrrrrrrrr     rrrrrrrrrrrrrrrrrrrrrr 68
r 70
r+ 72
r 74
r 78
    r+ 85
----
== A Sample Module - Perldoc

.hilite
## Math is *Hard*
#
# As *Arithmetic Barbie* has taught us: "{/Math is Hard/}".
# `Math::Barbie` changes all that. It makes doing math as easy as
# pulling a string.
#
# Copyright (c) 2007.
# Ingy döt Net <ingy@cpan.org>.
# All rights reserved.
# 
package Math::Barbie;
use base 'Exporter';
our @EXPORT = qw(add divide);

## SYNOPSIS:
# 
#     use Math::Barbie;
# 
#     print "2 + 4 = ", add(2, 4);
#     print "2 / 4 = ", divide(2, 4);

## Add two arguments and return the result.
sub add {
    my $x = shift;   ## First number
    my $y = shift;   ## Second number
    return $x + $y;
}

## Divide the first number by the second number and return the result.
sub divide {
    my $x = shift;   ## Numerator
    my $y = shift    ## Divisor
      or die "Can't divide by zero";
    return $x / $y;
}

## BUGS:
# Math::Barbie currently only supports half of the mathematical functions.
# `subtract` and `multiply` are /coming real soon now/.

## See Also: [Math::Ken]

1;

ggb+ 1-10
        rrrrrrrrrrrr 11
                 rrr rrrrrr 13
ggb+ 15-20
ggb+ 22
    rrr 23
       rr            ggb+ 24-25
ggb+ 29
    rrrrrr 30
       rr            ggb+ 31-32
ggb+ 37-41
----
== Perldoc In Action

* Module Install Does It All
* Perldoc is self hosting
* On CPAN Now
* Perldoc Live Demo

----
== Origami 2.0
.image:camel.jpg 400
----
== Perl::Folder

Suppose you want to find a line like this in some Perl code:

    use Some::Module;

----
== Perl::Folder

It's not so easy:

    my $string = <<END;
    ...
    use Some::Module;
    ...
    END
    
----
== Perl::Folder

It get's harder:

    =head1 This is doc
    my $string = <<END;
    =cut
    ...
    use Some::Module;
    ...
    END
----
== Perl::Folder

* Perl::Folder folds *blocks* in your Perl code
** Comments
** Heredocs
** POD
** DATA section
* Then your can search the result more confidently

----
== Perl::Folder

    package Foo;
    
    # Some comments
    # to descibe things
    
    my $string = <<THIS;
    I
    Love
    Perl
    THIS
    
    use Some::Module;
    
    =head1
    
    I<Love> it or B<leave> it.
    
    =cut
    
    __DATA__
    yi
    er
    san
----
== Perl::Folder

    package Foo;
    
    # 602047bdc54148f6b49f565cb722397238a918d2
    
    my $string = <<THIS;
    fdd83567a150e57d7de4c6bb4417ead107dc1d1a
    THIS
    
    use Some::Module;
    
    =pod e690d3f8a6cc55e03e39ecc006a4c45966a3bcd8
    =cut
    
    __DATA__
    4f27ccc6be933d13d62008baaed839d95bd54b05

----
== And Finally...
----
== USB 2.0!!!
.image:USBG-2U162.jpg
----
* 480 Mb/s
* Faster than Firewire!
+* Ingy's latest creation!
.image:usb-cannon.jpg
----
The |END| Draweth Nigh.
Ingy Loves You. Love Him Back.
Have You A |Question|?
----
== The End
